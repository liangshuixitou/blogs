<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>l1hy�ĸ��˲���</title>
  
  
  <link href="http://www.l1hy.top/atom.xml" rel="self"/>
  
  <link href="http://www.l1hy.top/"/>
  <updated>2021-02-25T12:44:16.272Z</updated>
  <id>http://www.l1hy.top/</id>
  
  <author>
    <name>l1hy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指Offer-重建二叉树</title>
    <link href="http://www.l1hy.top/2021/02/25/%E5%89%91%E6%8C%87Offer-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://www.l1hy.top/2021/02/25/%E5%89%91%E6%8C%87Offer-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-02-25T12:33:39.000Z</published>
    <updated>2021-02-25T12:44:16.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重建二叉树"><a class="markdownIt-Anchor" href="#重建二叉树"></a> 重建二叉树</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>例如，给出</p><blockquote><p>前序遍历 preorder = [3,9,20,15,7]</p><p>中序遍历 inorder = [9,3,15,20,7]</p></blockquote><p>返回如下的二叉树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>在先序遍历的开头必定试root节点，然后在中序遍历中查找到相同的节点，即可对两个数组做一个划分，然后递归实现，递归出口是长度为0的数组返回null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * Definition <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line"> *     <span class="keyword">int</span> val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = preorder.length;</span><br><span class="line">        <span class="keyword">return</span> build(<span class="number">0</span>, len, preorder, <span class="number">0</span>, len, inorder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> low1, <span class="keyword">int</span> high1, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span> low2, <span class="keyword">int</span> high2, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = high1 - low1;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[low1]);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; inorder[index + low2] != preorder[low1]; ++index);</span><br><span class="line">        root.left = build(low1 + <span class="number">1</span>, index + low1 + <span class="number">1</span>, preorder, low2, low2 + index, inorder);</span><br><span class="line">        root.right = build(low1 + index + <span class="number">1</span>, low1 + len, preorder, low2 + index + <span class="number">1</span>, low2 + len, inorder);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重建二叉树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重建二叉树&quot;&gt;&lt;/a&gt; 重建二叉树&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://www.l1hy.top/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="medium" scheme="http://www.l1hy.top/tags/medium/"/>
    
    <category term="递归" scheme="http://www.l1hy.top/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="树" scheme="http://www.l1hy.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二维数组中的查找</title>
    <link href="http://www.l1hy.top/2021/02/25/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://www.l1hy.top/2021/02/25/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2021-02-25T05:17:49.000Z</published>
    <updated>2021-02-25T12:34:44.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二维数组中的查找"><a class="markdownIt-Anchor" href="#二维数组中的查找"></a> 二维数组中的查找</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例:</p><blockquote><p>现有矩阵 matrix 如下：</p><p>[</p><p>[1,   4,  7, 11, 15],</p><p>[2,   5,  8, 12, 19],</p><p>[3,   6,  9, 16, 22],</p><p>[10, 13, 14, 17, 24],</p><p>[18, 21, 23, 26, 30]</p><p>]</p><p>给定 target = 5，返回 true。</p><p>给定 target = 20，返回 false。</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>从矩阵的右上角或者左下角开始搜索即可，以右上角为例，若是大于target，则向下移动，若是小于则向左移动即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; m &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &gt; target) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &lt; target) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二维数组中的查找&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二维数组中的查找&quot;&gt;&lt;/a&gt; 二维数组中的查找&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://www.l1hy.top/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="数组" scheme="http://www.l1hy.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="medium" scheme="http://www.l1hy.top/tags/medium/"/>
    
    <category term="双指针" scheme="http://www.l1hy.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-数组中重复的数字</title>
    <link href="http://www.l1hy.top/2021/02/24/%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://www.l1hy.top/2021/02/24/%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2021-02-24T15:21:14.000Z</published>
    <updated>2021-02-24T15:23:49.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组中重复的数字"><a class="markdownIt-Anchor" href="#数组中重复的数字"></a> 数组中重复的数字</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><blockquote><p>输入：</p><p>[2, 3, 1, 0, 2, 5, 3]</p><p>输出：2 或 3</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>利用java中的HashSet即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hashSet.contains(nums[i])) &#123;</span><br><span class="line">                hashSet.add(nums[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组中重复的数字&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数组中重复的数字&quot;&gt;&lt;/a&gt; 数组中重复的数字&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://www.l1hy.top/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="数组" scheme="http://www.l1hy.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="http://www.l1hy.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="easy" scheme="http://www.l1hy.top/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>832-翻转图像</title>
    <link href="http://www.l1hy.top/2021/02/24/832-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <id>http://www.l1hy.top/2021/02/24/832-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/</id>
    <published>2021-02-24T15:03:06.000Z</published>
    <updated>2021-02-24T15:21:27.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="832翻转图像"><a class="markdownIt-Anchor" href="#832翻转图像"></a> [832]翻转图像</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。</p><p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。</p><p>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p><p>示例 1：</p><blockquote><p>输入：[[1,1,0],[1,0,1],[0,0,0]]</p><p>输出：[[1,0,0],[0,1,0],[1,1,1]]</p><p>解释：首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；</p><p>然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]</p></blockquote><p>示例 2：</p><blockquote><p>输入：[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</p><p>输出：[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p><p>解释：首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；</p><p>然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><h6 id="暴力求解"><a class="markdownIt-Anchor" href="#暴力求解"></a> 暴力求解</h6><p>根据题目描述进行对应操作即可，在原来的数组上，遍历[0, n / 2)列进行反转即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] flipAndInvertImage(<span class="keyword">int</span>[][] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = A.length;</span><br><span class="line">        <span class="keyword">int</span> n = A[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = A[i][j];</span><br><span class="line">                A[i][j] = A[i][n - <span class="number">1</span> - j];</span><br><span class="line">                A[i][n - <span class="number">1</span> - j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                A[i][j] = <span class="number">1</span> - A[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id=""><a class="markdownIt-Anchor" href="#"></a> </h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;832翻转图像&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#832翻转图像&quot;&gt;&lt;/a&gt; [832]翻转图像&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://www.l1hy.top/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://www.l1hy.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="easy" scheme="http://www.l1hy.top/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>1052-爱生气的书店老板</title>
    <link href="http://www.l1hy.top/2021/02/23/1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/"/>
    <id>http://www.l1hy.top/2021/02/23/1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/</id>
    <published>2021-02-23T07:21:29.000Z</published>
    <updated>2021-02-24T15:21:43.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1052爱生气的书店老板"><a class="markdownIt-Anchor" href="#1052爱生气的书店老板"></a> [1052]爱生气的书店老板</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。</p><p>在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。</p><p>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。</p><p>请你返回这一天营业下来，最多有多少客户能够感到满意的数量。</p><p>示例：</p><blockquote><p>输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3</p><p>输出：16</p><p>解释：</p><p>书店老板在最后 3 分钟保持冷静。</p><p>感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>利用滑动窗口即可，将两个输入的数组进行相乘，然后利用滑动窗口计算长度为X的窗口内最大可节省的不生气的收益，再与之前的满意数量相加即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSatisfied</span><span class="params">(<span class="keyword">int</span>[] customers, <span class="keyword">int</span>[] grumpy, <span class="keyword">int</span> X)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = customers.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 总的可以达到的满意程度</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] grumpys = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            grumpys[i] = customers[i] * grumpy[i];</span><br><span class="line">            <span class="keyword">if</span> (grumpy[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += customers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; X; ++i) &#123;</span><br><span class="line">            ans += grumpys[i];</span><br><span class="line">        &#125;</span><br><span class="line">        max = ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - X + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            ans += grumpys[i + X - <span class="number">1</span>];</span><br><span class="line">            ans -= grumpys[i - <span class="number">1</span>];</span><br><span class="line">            max = Math.max(ans, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max + sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1052爱生气的书店老板&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1052爱生气的书店老板&quot;&gt;&lt;/a&gt; [1052]爱生气的书店老板&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="leetcode" scheme="http://www.l1hy.top/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://www.l1hy.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="滑动窗口" scheme="http://www.l1hy.top/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
    <category term="medium" scheme="http://www.l1hy.top/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>766-托普利茨矩阵</title>
    <link href="http://www.l1hy.top/2021/02/22/766-%E6%89%98%E6%99%AE%E5%88%A9%E8%8C%A8%E7%9F%A9%E9%98%B5/"/>
    <id>http://www.l1hy.top/2021/02/22/766-%E6%89%98%E6%99%AE%E5%88%A9%E8%8C%A8%E7%9F%A9%E9%98%B5/</id>
    <published>2021-02-22T13:41:19.000Z</published>
    <updated>2021-02-23T06:46:45.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="766托普利茨矩阵"><a class="markdownIt-Anchor" href="#766托普利茨矩阵"></a> [766]托普利茨矩阵</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>给你一个 m x n 的矩阵 matrix 。如果这个矩阵是托普利茨矩阵，返回 true ；否则，返回 false 。</p><p>如果矩阵上每一条由左上到右下的对角线上的元素都相同，那么这个矩阵是 托普利茨矩阵 。</p><p>示例 1：</p><blockquote><p>输入：matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]</p><p>输出：true</p><p>解释：在上述矩阵中, 其对角线为: “[9]”, “[5, 5]”, “[1, 1, 1]”, “[2, 2, 2]”, “[3, 3]”, “[4]”。</p><p>各条对角线上的所有元素均相同, 因此答案是 True 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：matrix = [[1,2],[2,2]]</p><p>输出：false</p><p>解释：对角线 “[1, 2]” 上的元素不同。</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>沿着长和宽两条边分别斜向遍历即可，注意边界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isToeplitzMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> num = matrix[i + j][j];</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; i + j &lt; m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i + j][j] != num) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> num = matrix[i][i + j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; m &amp;&amp; i + j &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][i + j] != num) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;766托普利茨矩阵&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#766托普利茨矩阵&quot;&gt;&lt;/a&gt; [766]托普利茨矩阵&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目</summary>
      
    
    
    
    <category term="leetcode" scheme="http://www.l1hy.top/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://www.l1hy.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="easy" scheme="http://www.l1hy.top/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>3-无重复字符的最长子串</title>
    <link href="http://www.l1hy.top/2021/02/22/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://www.l1hy.top/2021/02/22/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</id>
    <published>2021-02-22T07:43:59.000Z</published>
    <updated>2021-02-22T13:41:28.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3无重复字符的最长子串"><a class="markdownIt-Anchor" href="#3无重复字符的最长子串"></a> [3]无重复字符的最长子串</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</p><p>示例 1:</p><blockquote><p>输入: s = “abcabcbb”</p><p>输出: 3</p><p>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><p>示例 2:</p><blockquote><p>输入: s = “bbbbb”</p><p>输出: 1</p><p>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><p>示例 3:</p><blockquote><p>输入: s = “pwwkew”</p><p>输出: 3</p><p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p><p>请注意，你的答案必须是 子串 的长度，“pwke” 是一个子序列，不是子串。</p></blockquote><p>示例 4:</p><blockquote><p>输入: s = “”</p><p>输出: 0</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><h6 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h6><p>自己想的一个动态规划的解法，设计一个lens数组存储以当前字符为结尾的最长无重复字符子串，每次计算的时候只需要前向搜索到前一个字符为结尾的最长子串的头即可，中途若是有与当前字符相同的则跳出循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] lens = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        lens[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt; i - lens[i - <span class="number">1</span>] - <span class="number">1</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == i - lens[i - <span class="number">1</span>] - <span class="number">1</span>) &#123;</span><br><span class="line">                lens[i] = lens[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lens[i] = i - j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; lens[i]) &#123;</span><br><span class="line">                max = lens[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="滑动窗口与哈希表"><a class="markdownIt-Anchor" href="#滑动窗口与哈希表"></a> 滑动窗口与哈希表</h6><p>利用滑动窗口来进行最长子串的搜索，利用哈希表来判断当前窗口中是否有重复的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        Set window = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                window.remove(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; s.length() &amp;&amp; !window.contains(s.charAt(j))) &#123;</span><br><span class="line">                window.add(s.charAt(j));</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max, j - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3无重复字符的最长子串&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#3无重复字符的最长子串&quot;&gt;&lt;/a&gt; [3]无重复字符的最长子串&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre</summary>
      
    
    
    
    <category term="leetcode" scheme="http://www.l1hy.top/categories/leetcode/"/>
    
    
    <category term="medium" scheme="http://www.l1hy.top/tags/medium/"/>
    
    <category term="哈希表" scheme="http://www.l1hy.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="双指针" scheme="http://www.l1hy.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="字符串" scheme="http://www.l1hy.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>2-两数相加</title>
    <link href="http://www.l1hy.top/2021/02/22/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://www.l1hy.top/2021/02/22/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-02-22T01:32:11.000Z</published>
    <updated>2021-02-22T05:38:49.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2两数相加"><a class="markdownIt-Anchor" href="#2两数相加"></a> [2]两数相加</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例 1：</p><blockquote><p>输入：l1 = [2,4,3], l2 = [5,6,4]</p><p>输出：[7,0,8]</p><p>解释：342 + 465 = 807.</p></blockquote><p>示例 2：</p><blockquote><p>输入：l1 = [0], l2 = [0]</p><p>输出：[0]</p></blockquote><p>示例 3：</p><blockquote><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</p><p>输出：[8,9,9,9,0,0,0,1]</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>类似于合并两条链表，设一个flag，然后遍历同时遍历两条链表，进行相加即可，关键在于最后要判断下是否有进位的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">// 标志位</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        ListNode p = l1;</span><br><span class="line">        ListNode q = l2;</span><br><span class="line">        ListNode t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 重复部分</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = p.val + q.val + flag;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (result &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                result -= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.val = result;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.val = p.val + flag;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.val &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                p.val -= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            q.val = q.val + flag;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (q.val &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                q.val -= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            t = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p = l1;</span><br><span class="line">        q = l2;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span> &amp;&amp; q.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2两数相加&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2两数相加&quot;&gt;&lt;/a&gt; [2]两数相加&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描</summary>
      
    
    
    
    <category term="leetcode" scheme="http://www.l1hy.top/categories/leetcode/"/>
    
    
    <category term="medium" scheme="http://www.l1hy.top/tags/medium/"/>
    
    <category term="递归" scheme="http://www.l1hy.top/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="链表" scheme="http://www.l1hy.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="数学" scheme="http://www.l1hy.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>1-两数之和</title>
    <link href="http://www.l1hy.top/2021/02/21/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://www.l1hy.top/2021/02/21/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-02-21T13:55:51.000Z</published>
    <updated>2021-02-22T01:50:17.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1两数之和"><a class="markdownIt-Anchor" href="#1两数之和"></a> [1]两数之和</h2><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><blockquote><p>输入：nums = [2,7,11,15], target = 9</p><p>输出：[0,1]</p><p>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [3,2,4], target = 6</p><p>输出：[1,2]</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [3,3], target = 6</p><p>输出：[0,1]</p></blockquote><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解：</h4><h6 id="1-暴力法"><a class="markdownIt-Anchor" href="#1-暴力法"></a> 1-暴力法</h6><p>强行两次循环遍历数组即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span> || nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    result[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-哈希表"><a class="markdownIt-Anchor" href="#2-哈希表"></a> 2-哈希表</h6><p>利用hashMap的O(1)查找，将时间降低到仅需遍历一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span> || nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashMap.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;hashMap.get(target - nums[i]), i&#125;;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            hashMap.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1两数之和&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1两数之和&quot;&gt;&lt;/a&gt; [1]两数之和&lt;/h2&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描</summary>
      
    
    
    
    <category term="leetcode" scheme="http://www.l1hy.top/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://www.l1hy.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="http://www.l1hy.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="easy" scheme="http://www.l1hy.top/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>Quick-start-Hexo</title>
    <link href="http://www.l1hy.top/2021/02/20/Quick-start/"/>
    <id>http://www.l1hy.top/2021/02/20/Quick-start/</id>
    <published>2021-02-20T00:35:42.000Z</published>
    <updated>2021-02-20T01:39:08.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速开始hexo"><a class="markdownIt-Anchor" href="#快速开始hexo"></a> 快速开始Hexo</h1><p>以本博客为例，简单介绍下如何利用Hexo和github的项目page搭建起个人博客(静态网站)</p><h3 id="hexo简介"><a class="markdownIt-Anchor" href="#hexo简介"></a> Hexo简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><a href="https://hexo.io/zh-cn/">hexo官网</a> 中有着详细的关于hexo的介绍（文档，API，主题，插件）</p><h3 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h3><p>安装前提（安装教程在后续推出）</p><ul><li><a href="https://nodejs.org/en/">node.js</a></li><li><a href="http://git-scm.com/">Git</a></li></ul><p>采用安装Hexo脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>对于linux用户可用下面的命令将Hexo命令添加到环境变量中，win用户手动添加即可（貌似安装的时候自动添加了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure><h3 id="建立博客目录"><a class="markdownIt-Anchor" href="#建立博客目录"></a> 建立博客目录</h3><p>创建一个blogs的文件夹（存放所有的博客项目）然后执行下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>上述命令在blogs文件夹中创建了一个名为blog的博客项目</p><p>新建完成后，blog的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h5 id="_configyml"><a class="markdownIt-Anchor" href="#_configyml"></a> _config.yml</h5><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h5 id="themes"><a class="markdownIt-Anchor" href="#themes"></a> themes</h5><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h3 id="创建一篇博文"><a class="markdownIt-Anchor" href="#创建一篇博文"></a> 创建一篇博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>在 source/_post 目录下创建一篇名为 <em>My New Post</em> 的 Markdown 文件，文件开头处可配置分类信息，tag 信息等</p><h3 id="启动本地服务"><a class="markdownIt-Anchor" href="#启动本地服务"></a> 启动本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--port</code></td><td style="text-align:left">重设端口</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--static</code></td><td style="text-align:left">只使用静态文件</td></tr><tr><td style="text-align:left"><code>-l</code>, <code>--log</code></td><td style="text-align:left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="生成静态文件"><a class="markdownIt-Anchor" href="#生成静态文件"></a> 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-d</code>, <code>--deploy</code></td><td style="text-align:left">文件生成后立即部署网站</td></tr><tr><td style="text-align:left"><code>-w</code>, <code>--watch</code></td><td style="text-align:left">监视文件变动</td></tr><tr><td style="text-align:left"><code>-b</code>, <code>--bail</code></td><td style="text-align:left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td style="text-align:left"><code>-f</code>, <code>--force</code></td><td style="text-align:left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td style="text-align:left"><code>-c</code>, <code>--concurrency</code></td><td style="text-align:left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h3 id="部署到远程站点"><a class="markdownIt-Anchor" href="#部署到远程站点"></a> 部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-g</code>, <code>--generate</code></td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><h3 id="清理"><a class="markdownIt-Anchor" href="#清理"></a> 清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速开始hexo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#快速开始hexo&quot;&gt;&lt;/a&gt; 快速开始Hexo&lt;/h1&gt;
&lt;p&gt;以本博客为例，简单介绍下如何利用Hexo和github的项目page搭建起个人博客(静态网站)&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="环境搭建" scheme="http://www.l1hy.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="http://www.l1hy.top/tags/Hexo/"/>
    
    <category term="Markdown" scheme="http://www.l1hy.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
